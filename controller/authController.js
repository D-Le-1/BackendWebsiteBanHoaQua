const jwt = require("jsonwebtoken");
const crypto = require("crypto");
require("dotenv").config();
const nodemailer = require("nodemailer");
const {
  signupSchema,
  signinSchema,
  forgotPasswordSchema,
  resetPasswordSchema,
} = require("../middleware/validator");
const { doHash, doHashValidation } = require("../utils/hashing");
const { User } = require("../models/userSchema");

exports.signup = async (req, res) => {
  const { name, phone, address, email, password, role } = req.body;
  try {
    const { error, value } = signupSchema.validate({ email, password });
    if (error) {
      return res
        .status(401)
        .json({ success: false, message: error.details[0].message });
    }
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res
        .status(401)
        .json({ success: false, message: "User already exist!" });
    }

    const hashedPassword = await doHash(password, 12);

    const newRole = role === "admin" ? "admin" : "user";

    const newUser = new User({
      name,
      phone,
      address,
      email,
      password: hashedPassword,
      role: newRole,
    });
    const result = await newUser.save();
    result.password = undefined;
    res.status(201).json({
      success: true,
      message: "Your account has been created successfully!",
      result,
    });
  } catch (err) {
    console.log(err);
  }
};

exports.signin = async (req, res) => {
  const { email, password } = req.body;
  try {
    const { error, value } = signinSchema.validate({ email, password });
    if (error) {
      return res
        .status(401)
        .json({ success: false, message: error.details[0].message });
    }
    const existingUser = await User.findOne({ email }).select("+password");
    if (!existingUser) {
      return res
        .status(401)
        .json({ success: false, message: "User does not exist!" });
    }
    const result = await doHashValidation(password, existingUser.password);
    if (!result) {
      return res
        .status(401)
        .json({ success: false, message: "Invalid credentials!" });
    }
    const token = jwt.sign(
      {
        avatar: existingUser.avatar,
        userId: existingUser._id,
        name: existingUser.name,
        phone: existingUser.phone,
        address: existingUser.address,
        email: existingUser.email,
        role: existingUser.role, // üî• Th√™m role
        verified: existingUser.verified,
      },
      process.env.TOKEN_SECRET,
      { expiresIn: "7d" }
    );
    res.json({
      success: true,
      token,
      user: {
        userId: existingUser._id,
        avatar: existingUser.avatar,
        name: existingUser.name,
        phone: existingUser.phone,
        address: existingUser.address,
        email: existingUser.email,
        role: existingUser.role,
      },
      message: "logged in successfully",
    });
  } catch (err) {
    console.log(err);
  }
};

exports.signout = async (req, res) => {
  res
    .clearCookie("Authorization")
    .status(201)
    .json({ success: true, message: "logged out successfully!" });
};

exports.getlist = async (req, res) => {
  const result = await User.find({});
  try {
    res.send(result);
  } catch (error) {
    console.log(error);
  }
};

exports.updateUserInfo = async (req, res) => {
  try {
    const userId = req.user.userId; // L·∫•y t·ª´ middleware auth (JWT ƒë√£ decode)

    // L·∫•y c√°c tr∆∞·ªùng t·ª´ req.body
    const { name, phone, address } = req.body;

    // L·∫•y file avatar t·ª´ req.file (n·∫øu c√≥)
    const avatar = req.file
      ? `http://localhost:8000/uploads/${req.file.filename}`
      : undefined;

    // T√¨m user hi·ªán t·∫°i ƒë·ªÉ l·∫•y avatar c≈© (n·∫øu kh√¥ng c√≥ file m·ªõi)
    const currentUser = await User.findById(userId);
    if (!currentUser) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }

    // C·∫≠p nh·∫≠t user
    const updatedUser = await User.findByIdAndUpdate(
      userId,
      {
        name,
        phone,
        address,
        avatar: avatar || currentUser.avatar, // Gi·ªØ avatar c≈© n·∫øu kh√¥ng c√≥ file m·ªõi
      },
      { new: true, runValidators: true }
    );

    if (!updatedUser) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }

    res.status(200).json({
      success: true,
      message: "User info updated successfully",
      user: updatedUser,
    });
  } catch (error) {
    console.error("Update user info failed:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

exports.changeRole = async (req, res) => {
  const { id } = req.params;
  const { role } = req.body;
  try {
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { role },
      { new: true, runValidators: true }
    );
    if (!updatedUser) {
      return res
        .status(404)
        .json({ success: false, message: "User not found" });
    }
    res.status(200).json({
      success: true,
      message: "User role updated successfully",
      user: updatedUser,
    });
  } catch (error) {
    console.error("Error updating user role:", error);
    res.status(500).json({ success: false, message: "Server error" });
  }
};

exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;

    // Validate email
    const { error } = forgotPasswordSchema.validate({ email });
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message,
      });
    }

    // T√¨m ng∆∞·ªùi d√πng theo email
    const user = await User.findOne({ email });

    // N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng, v·∫´n tr·∫£ v·ªÅ th√†nh c√¥ng ƒë·ªÉ kh√¥ng ti·∫øt l·ªô th√¥ng tin t√†i kho·∫£n
    if (!user) {
      return res.status(200).json({
        success: true,
        message:
          "N·∫øu email t·ªìn t·∫°i, ch√∫ng t√¥i ƒë√£ g·ª≠i h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      });
    }

    // T·∫°o m√£ x√°c nh·∫≠n ng·∫´u nhi√™n 6 ch·ªØ s·ªë
    const resetCode = Math.floor(100000 + Math.random() * 900000).toString();

    // Hash m√£ x√°c nh·∫≠n tr∆∞·ªõc khi l∆∞u
    const hashedResetCode = crypto
      .createHash("sha256")
      .update(resetCode)
      .digest("hex");

    // L∆∞u m√£ v√†o database v√† thi·∫øt l·∫≠p th·ªùi gian h·∫øt h·∫°n (10 ph√∫t)
    user.forgotPasswordCode = hashedResetCode;
    user.forgotPasswordCodeValidation = Date.now() + 10 * 60 * 1000;
    await user.save();

    // Thi·∫øt l·∫≠p n·ªôi dung email
    const message = `
      Xin ch√†o ${user.name},

      M√£ x√°c nh·∫≠n ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n l√†: ${resetCode}

      M√£ n√†y s·∫Ω h·∫øt h·∫°n sau 10 ph√∫t.

      N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.

      Tr√¢n tr·ªçng,
      ƒê·ªôi ng≈© h·ªó tr·ª£
    `;

    // Thi·∫øt l·∫≠p transporter email
    const transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST,
      port: process.env.EMAIL_PORT,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    // G·ª≠i email
    await transporter.sendMail({
      from: process.env.EMAIL_FROM,
      to: user.email,
      subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      text: message,
    });

    res.status(200).json({
      success: true,
      message: "M√£ x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
    });
  } catch (error) {
    console.error("L·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói khi g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      error: error.message,
    });
  }
};

exports.resetPassword = async (req, res) => {
  try {
    const { email, code, password, confirmPassword } = req.body;

    // Validate m·∫≠t kh·∫©u
    const { error } = resetPasswordSchema.validate({
      password,
      confirmPassword,
    });
    if (error) {
      return res.status(400).json({
        success: false,
        message: error.details[0].message,
      });
    }

    // Hash m√£ x√°c nh·∫≠n ƒë·ªÉ so s√°nh
    const hashedCode = crypto.createHash("sha256").update(code).digest("hex");

    // T√¨m ng∆∞·ªùi d√πng v·ªõi email v√† m√£ x√°c nh·∫≠n h·ª£p l·ªá
    const user = await User.findOne({
      email,
      forgotPasswordCode: hashedCode,
      forgotPasswordCodeValidation: { $gt: Date.now() },
    }).select("+forgotPasswordCode +forgotPasswordCodeValidation");

    // N·∫øu kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c m√£ ƒë√£ h·∫øt h·∫°n
    if (!user) {
      return res.status(400).json({
        success: false,
        message: "M√£ x√°c nh·∫≠n kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
      });
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedPassword = await doHash(password, 12);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u v√† x√≥a m√£ reset
    user.password = hashedPassword;
    user.forgotPasswordCode = undefined;
    user.forgotPasswordCodeValidation = undefined;
    await user.save();

    res.status(200).json({
      success: true,
      message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({
      success: false,
      message: "ƒê√£ x·∫£y ra l·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      error: error.message,
    });
  }
};
